<?php
require_once "PHPUnit/Framework/IncompleteTestError.php";
require_once dirname(dirname(__FILE__)) . "/src/Ginq.php";

/**
 * Test class for Ginq.
 * Generated by PHPUnit_Util_Skeleton on 2013-01-16 at 15:33:47.
 */
class GinqTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("GinqTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * testGetIterator().
     */
    public function testGetIterator() {
        $iter = Ginq::from([1,2,3,4,5])->getIterator();
        $this->assertTrue($iter instanceof Iterator);
    }

    /**
     * testToArray().
     */
    public function testToArray() {
        $arr = Ginq::from([1,2,3,4,5])->toArray();
        $this->assertEquals([1,2,3,4,5], $arr);
    }

    /**
     * testZero().
     */
    public function testZero() {
        $arr = Ginq::zero()->toArray();
        $this->assertEquals(array(), $arr);
    }

    /**
     * testFrom().
     */
    public function testFrom() {
        // array
        $arr = Ginq::from([1,2,3,4,5])->toArray();
        $this->assertEquals([1,2,3,4,5], $arr);
        
        // Iterator
        $arr = Ginq::from(new ArrayIterator([1,2,3,4,5]))->toArray();
        $this->assertEquals([1,2,3,4,5], $arr);
        
        // IteratorAggregate
        $arr = Ginq::from(new ArrayObject([1,2,3,4,5]))->toArray();
        $this->assertEquals([1,2,3,4,5], $arr);

        // Ginq
        $arr = Ginq::from(Ginq::from([1,2,3,4,5]))->toArray();
        $this->assertEquals([1,2,3,4,5], $arr);
    }

    /**
     * testSelect().
     * 
     * @expectedException InvalidArgumentException
     */
    public function testSelect() {
        // function selector
        $arr = Ginq::from([1,2,3,4,5])
                   ->select(function($x) {return $x * $x; })
                   ->toArray();
        $this->assertEquals([1,4,9,16,25], $arr);

        $data = [
              ['id' => 1, 'name' => 'Taro',    'city' => 'Takatsuki']
            , ['id' => 2, 'name' => 'Atsushi', 'city' => 'Ibaraki']
            , ['id' => 3, 'name' => 'Junko',   'city' => 'Sakai']
            ];

        // string selector
        $arr = Ginq::from($data)->select("name")->toArray();
        $this->assertEquals(['Taro','Atsushi','Junko'], $arr);

        // invalid selector
        Ginq::from([1,2,3,4,5])->select(8); 

        $this->fail();
    }

    /**
     * testSelectMany().
     */
    public function testSelectMany() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testWhere().
     */
    public function testWhere() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testRange().
     */
    public function testRange() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testRepeat().
     */
    public function testRepeat() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testCycle().
     */
    public function testCycle() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testZip().
     */
    public function testZip() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testJoin().
     */
    public function testJoin() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testAny().
     */
    public function testAny() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testAll().
     */
    public function testAll() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testTake().
     */
    public function testTake() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testTakeWhile().
     */
    public function testTakeWhile() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    /**
     * @todo Implement testDropWhile().
     */
    public function testDropWhile() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }
}

// Call GinqTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "GinqTest::main") {
    GinqTest::main();
}
?>
